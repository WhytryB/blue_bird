import base64
import json

encoded_data = """
MwWjM0RERhd3pMQ25BMDdKTlJ5Zi9nbUFlR2tjWGloVUJSSkZ0NENCQUV6S0lnWUR6SXdNalF3TkRFek1UUXpOek14V3FDQ0JWSXdnZ1ZPTUlJRXI2QURBZ0VDQWhSbCs3Zk8vRGpSbHdJQUFBQUJBQUFBRHdBQUFEQUtCZ2dxaGtqT1BRUURCRENCN0RFOU1Ec0dBMVVF
Q2d3MFRXbHVhWE4wY25rZ2IyWWdaR2xuYVhSaGJDQjBjbUZ1YzJadmNtMWhkR2x2YmlCdlppQlZhM0poYVc1bElDaFVSVk5VS1RFbE1DTUdBMVVFQ3d3Y1FXUnRhVzVwYzNSeVlYUnZjaUJKVkZNZ1EwTkJJQ2hVUlZOVUtURTBNRElHQTFVRUF3d3JRMlZ1ZEhKaGJDQm
paWEowYVdacFkyRjBhVzl1SUdGMWRHaHZjbWwwZVNBb1VrOVBWQ0JVUlZOVUtURVpNQmNHQTFVRUJSTVFWVUV0TkRNeU1qQTROVEV0TWpFd016RUxNQWtHQTFVRUJoTUNWVUV4RFRBTEJnTlZCQWNNQkV0NWFYWXhGekFWQmdOVkJHRU1EazVVVWxWQkxUUXpNakl3T0RV
eE1CNFhEVEl5TURFeE16RXhNVFV3TUZvWERUSTNNREV4TXpFeE1UVXdNRm93Z2FjeEdUQVhCZ05WQkFvTUVGTkZJQ0pFU1VsQklpQW9WRVZUVkNreE9qQTRCZ05WQkFNTU1WUlRRUzF6WlhKMlpYSWdiMllnZEdobElFRmtiV2x1YVhOMGNtRjBiM0lnU1ZSVElFTkRRU0
FvUTBFZ1ZFVlRWQ2t4R1RBWEJnTlZCQVVURUZWQkxUUXpNemsxTURNekxUSXhNVFV4Q3pBSkJnTlZCQVlUQWxWQk1RMHdDd1lEVlFRSERBUkxlV2wyTVJjd0ZRWURWUVJoREE1T1ZGSlZRUzAwTXpNNU5UQXpNekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEw
SUFCQ1NwcHdCbWJZODlmbGU1MDZWUW9hYTh4T3dGa2F0SEpqNmFuKzEvZGoxNUYrUytib0hvVHV1djUyUEJ6MSsvUENQYWJKQkFneWFVV2Z4ZGxTZ2VwVDZqZ2dKd01JSUNiREFkQmdOVkhRNEVGZ1FVVzVHK1lqNU4xV1BaajYzV0J6OGxNQ1BuRWwwd0RnWURWUjBQQVFIL0JBUURBZ2JBTUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TUlNRVlHQTFVZElBUS9NRDB3T3dZSktvWWtBZ0VCQVFJQ01DNHdMQVlJS3dZQkJRVUhBZ0VXSUdoMGRIQnpPaTh2Y205dmRDMTBaWE4wTG1ONmJ5NW5iM1l1ZFdFdlkzQnpNRFVHQTFVZEVRUXVN
Q3lDRW1OaExYUmxjM1F1WTNwdkxtZHZkaTUxWVlFV2MzVndjRzl5ZEM1cGRITkFZM3B2TG1kdmRpNTFZVEFNQmdOVkhSTUJBZjhFQWpBQU1Id0dDQ3NHQVFVRkJ3RURCSEF3YmpBSUJnWUVBSTVHQVFFd0NBWUdCQUNPUmdFRU1EUUdCZ1FBamtZQkJUQXFNQ2dXSW1oMG
RIQnpPaTh2Y205dmRDMTBaWE4wTG1ONmJ5NW5iM1l1ZFdFdllXSnZkWFFUQW1WdU1CVUdDQ3NHQVFVRkJ3c0NNQWtHQndRQWkreEpBUUl3Q3dZSktvWWtBZ0VCQVFJQk1COEdBMVVkSXdRWU1CYUFGR1g3dDg3OE9OR1hZVjZXN0NXckg0TXYrRnVzTUZZR0ExVWRId1JQ
TUUwd1M2QkpvRWVHUldoMGRIQTZMeTl5YjI5MExYUmxjM1F1WTNwdkxtZHZkaTUxWVM5a2IzZHViRzloWkM5amNteHpMMVJsYzNSRFEwRXRSVU5FVTBFdE1qQXlNUzFHZFd4c0xtTnliREJYQmdOVkhTNEVVREJPTUV5Z1NxQkloa1pvZEhSd09pOHZjbTl2ZEMxMFpYTj
BMbU42Ynk1bmIzWXVkV0V2Wkc5M2JteHZZV1F2WTNKc2N5OVVaWE4wUTBOQkxVVkRSRk5CTFRJd01qRXRSR1ZzZEdFdVkzSnNNRVlHQ0NzR0FRVUZCd0VCQkRvd09EQTJCZ2dyQmdFRkJRY3dBWVlxYUhSMGNEb3ZMM0p2YjNRdGRHVnpkQzVqZW04dVoyOTJMblZoTDNO
bGNuWnBZMlZ6TDI5amMzQXZNQW9HQ0NxR1NNNDlCQU1FQTRHTUFEQ0JpQUpDQVVEZFRFZkUzeTRUUW1vZjlrY3BDUFZ3VUtGMHZoWHd0SHZBS0hnN1ppajlBK0VrQmpCTFdxL3U0bUpaSUJoZzArWWZvTmFSWG5aOUZFZTZSQWtmL0JKTEFrSUE5ZzdMcHlYSFF5ZWhycC
toaDNWM1FGL2RjSGwrM0ZEYmZKRUpXSDFocHBlQlN2dUVqVFF6SDcvQ09nMFhqbnJrTVZQT2ZuVW1kM1l0cXZFejhuV3YwL2t4Z2hPVk1JSVRrUUlCQVRDQ0FRVXdnZXd4UFRBN0JnTlZCQW9NTkUxcGJtbHpkSEo1SUc5bUlHUnBaMmwwWVd3Z2RISmhibk5tYjNKdFlY
\r\n--alamofire.boundary.1fbcbc60729fe398--\r\n"""




decoded_data = base64.b64decode(encoded_data).decode('utf-8')
print(decoded_data)